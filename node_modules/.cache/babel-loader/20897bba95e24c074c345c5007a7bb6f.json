{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _Button = require('react-bootstrap/lib/Button');\n\nvar _Button2 = _interopRequireDefault(_Button);\n\nvar _FormControl = require('react-bootstrap/lib/FormControl');\n\nvar _FormControl2 = _interopRequireDefault(_FormControl);\n\nvar _InputGroup = require('react-bootstrap/lib/InputGroup');\n\nvar _InputGroup2 = _interopRequireDefault(_InputGroup);\n\nvar _Overlay = require('react-bootstrap/lib/Overlay');\n\nvar _Overlay2 = _interopRequireDefault(_Overlay);\n\nvar _Popover = require('react-bootstrap/lib/Popover');\n\nvar _Popover2 = _interopRequireDefault(_Popover);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // See http://jszen.blogspot.com/2007/03/how-to-build-simple-calendar-with.html for calendar logic.\n\n\nvar instanceCount = 0;\n\nvar CalendarHeader = function (_React$Component) {\n  _inherits(CalendarHeader, _React$Component);\n\n  function CalendarHeader() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, CalendarHeader);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = CalendarHeader.__proto__ || Object.getPrototypeOf(CalendarHeader)).call.apply(_ref, [this].concat(args))), _this), _this.displayingMinMonth = function () {\n      if (!_this.props.minDate) return false;\n      var displayDate = new Date(_this.props.displayDate);\n      var minDate = new Date(_this.props.minDate);\n      return minDate.getFullYear() == displayDate.getFullYear() && minDate.getMonth() == displayDate.getMonth();\n    }, _this.displayingMaxMonth = function () {\n      if (!_this.props.maxDate) return false;\n      var displayDate = new Date(_this.props.displayDate);\n      var maxDate = new Date(_this.props.maxDate);\n      return maxDate.getFullYear() == displayDate.getFullYear() && maxDate.getMonth() == displayDate.getMonth();\n    }, _this.handleClickPrevious = function () {\n      var newDisplayDate = new Date(_this.props.displayDate);\n      newDisplayDate.setDate(1);\n      newDisplayDate.setMonth(newDisplayDate.getMonth() - 1);\n\n      _this.props.onChange(newDisplayDate);\n    }, _this.handleClickNext = function () {\n      var newDisplayDate = new Date(_this.props.displayDate);\n      newDisplayDate.setDate(1);\n      newDisplayDate.setMonth(newDisplayDate.getMonth() + 1);\n\n      _this.props.onChange(newDisplayDate);\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(CalendarHeader, [{\n    key: 'render',\n    value: function render() {\n      return _react2.default.createElement('div', {\n        className: 'text-center'\n      }, _react2.default.createElement('div', {\n        className: 'text-muted pull-left datepicker-previous-wrapper',\n        onClick: this.handleClickPrevious,\n        style: {\n          cursor: 'pointer'\n        }\n      }, this.displayingMinMonth() ? null : this.props.previousButtonElement), _react2.default.createElement('span', null, this.props.monthLabels[this.props.displayDate.getMonth()], ' ', this.props.displayDate.getFullYear()), _react2.default.createElement('div', {\n        className: 'text-muted pull-right datepicker-next-wrapper',\n        onClick: this.handleClickNext,\n        style: {\n          cursor: 'pointer'\n        }\n      }, this.displayingMaxMonth() ? null : this.props.nextButtonElement));\n    }\n  }]);\n\n  return CalendarHeader;\n}(_react2.default.Component);\n\nCalendarHeader.displayName = 'DatePickerHeader';\nCalendarHeader.propTypes = {\n  displayDate: _propTypes2.default.object.isRequired,\n  minDate: _propTypes2.default.string,\n  maxDate: _propTypes2.default.string,\n  onChange: _propTypes2.default.func.isRequired,\n  monthLabels: _propTypes2.default.array.isRequired,\n  previousButtonElement: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]).isRequired,\n  nextButtonElement: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]).isRequired\n};\nvar daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nvar Calendar = function (_React$Component2) {\n  _inherits(Calendar, _React$Component2);\n\n  function Calendar() {\n    var _ref2;\n\n    var _temp2, _this2, _ret2;\n\n    _classCallCheck(this, Calendar);\n\n    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return _ret2 = (_temp2 = (_this2 = _possibleConstructorReturn(this, (_ref2 = Calendar.__proto__ || Object.getPrototypeOf(Calendar)).call.apply(_ref2, [this].concat(args))), _this2), _this2.handleClick = function (e) {\n      var day = e.currentTarget.getAttribute('data-day');\n\n      var newSelectedDate = _this2.setTimeToNoon(new Date(_this2.props.displayDate));\n\n      newSelectedDate.setDate(day);\n\n      _this2.props.onChange(newSelectedDate);\n    }, _this2.handleClickToday = function () {\n      var newSelectedDate = _this2.setTimeToNoon(new Date());\n\n      _this2.props.onChange(newSelectedDate);\n    }, _this2.setTimeToNoon = function (date) {\n      date.setHours(12);\n      date.setMinutes(0);\n      date.setSeconds(0);\n      date.setMilliseconds(0);\n      return date;\n    }, _this2.getWeekNumber = function (date) {\n      var target = new Date(date.valueOf());\n      var dayNr = (date.getDay() + 6) % 7;\n      target.setDate(target.getDate() - dayNr + 3);\n      var firstThursday = target.valueOf();\n      target.setMonth(0, 1);\n\n      if (target.getDay() !== 4) {\n        target.setMonth(0, 1 + (4 - target.getDay() + 7) % 7);\n      }\n\n      return 1 + Math.ceil((firstThursday - target) / 604800000);\n    }, _temp2), _possibleConstructorReturn(_this2, _ret2);\n  }\n\n  _createClass(Calendar, [{\n    key: 'render',\n    value: function render() {\n      var _this3 = this;\n\n      var currentDate = this.setTimeToNoon(new Date());\n      var selectedDate = this.props.selectedDate ? this.setTimeToNoon(new Date(this.props.selectedDate)) : null;\n      var minDate = this.props.minDate ? this.setTimeToNoon(new Date(this.props.minDate)) : null;\n      var maxDate = this.props.maxDate ? this.setTimeToNoon(new Date(this.props.maxDate)) : null;\n      var year = this.props.displayDate.getFullYear();\n      var month = this.props.displayDate.getMonth();\n      var firstDay = new Date(year, month, 1);\n      var startingDay = this.props.weekStartsOn > 1 ? firstDay.getDay() - this.props.weekStartsOn + 7 : this.props.weekStartsOn === 1 ? firstDay.getDay() === 0 ? 6 : firstDay.getDay() - 1 : firstDay.getDay();\n      var showWeeks = this.props.showWeeks;\n      var monthLength = daysInMonth[month];\n\n      if (month == 1) {\n        if (year % 4 == 0 && year % 100 != 0 || year % 400 == 0) {\n          monthLength = 29;\n        }\n      }\n\n      var weeks = [];\n      var day = 1;\n\n      for (var i = 0; i < 9; i++) {\n        var week = [];\n\n        for (var j = 0; j <= 6; j++) {\n          if (day <= monthLength && (i > 0 || j >= startingDay)) {\n            var className = null;\n            var date = new Date(year, month, day, 12, 0, 0, 0).toISOString();\n            var beforeMinDate = minDate && Date.parse(date) < Date.parse(minDate);\n            var afterMinDate = maxDate && Date.parse(date) > Date.parse(maxDate);\n            var clickHandler = this.handleClick;\n            var style = {\n              cursor: 'pointer',\n              padding: this.props.cellPadding,\n              borderRadius: this.props.roundedCorners ? 5 : 0\n            };\n\n            if (beforeMinDate || afterMinDate) {\n              className = 'text-muted';\n              clickHandler = null;\n              style.cursor = 'default';\n            } else if (Date.parse(date) === Date.parse(selectedDate)) {\n              className = 'bg-primary';\n            } else if (Date.parse(date) === Date.parse(currentDate)) {\n              className = 'text-primary';\n            }\n\n            week.push(_react2.default.createElement('td', {\n              key: j,\n              'data-day': day,\n              onClick: clickHandler,\n              style: style,\n              className: className\n            }, day));\n            day++;\n          } else {\n            week.push(_react2.default.createElement('td', {\n              key: j\n            }));\n          }\n        }\n\n        if (showWeeks) {\n          var weekNum = this.getWeekNumber(new Date(year, month, day - 1, 12, 0, 0, 0));\n          week.unshift(_react2.default.createElement('td', {\n            key: 7,\n            style: {\n              padding: this.props.cellPadding,\n              fontSize: '0.8em',\n              color: 'darkgrey'\n            },\n            className: 'text-muted'\n          }, weekNum));\n        }\n\n        weeks.push(_react2.default.createElement('tr', {\n          key: i\n        }, week));\n\n        if (day > monthLength) {\n          break;\n        }\n      }\n\n      var weekColumn = showWeeks ? _react2.default.createElement('td', {\n        className: 'text-muted current-week',\n        style: {\n          padding: this.props.cellPadding\n        }\n      }) : null;\n      return _react2.default.createElement('table', {\n        className: 'text-center'\n      }, _react2.default.createElement('thead', null, _react2.default.createElement('tr', null, weekColumn, this.props.dayLabels.map(function (label, index) {\n        return _react2.default.createElement('td', {\n          key: index,\n          className: 'text-muted',\n          style: {\n            padding: _this3.props.cellPadding\n          }\n        }, _react2.default.createElement('small', null, label));\n      }))), _react2.default.createElement('tbody', null, weeks), this.props.showTodayButton && _react2.default.createElement('tfoot', null, _react2.default.createElement('tr', null, _react2.default.createElement('td', {\n        colSpan: this.props.dayLabels.length,\n        style: {\n          paddingTop: '9px'\n        }\n      }, _react2.default.createElement(_Button2.default, {\n        block: true,\n        bsSize: 'xsmall',\n        className: 'u-today-button',\n        onClick: this.handleClickToday\n      }, this.props.todayButtonLabel)))));\n    }\n  }]);\n\n  return Calendar;\n}(_react2.default.Component);\n\nCalendar.displayName = 'DatePickerCalendar';\nCalendar.propTypes = {\n  selectedDate: _propTypes2.default.object,\n  displayDate: _propTypes2.default.object.isRequired,\n  minDate: _propTypes2.default.string,\n  maxDate: _propTypes2.default.string,\n  onChange: _propTypes2.default.func.isRequired,\n  dayLabels: _propTypes2.default.array.isRequired,\n  cellPadding: _propTypes2.default.string.isRequired,\n  weekStartsOn: _propTypes2.default.number,\n  showTodayButton: _propTypes2.default.bool,\n  todayButtonLabel: _propTypes2.default.string,\n  roundedCorners: _propTypes2.default.bool,\n  showWeeks: _propTypes2.default.bool\n};\n\nvar _class = function (_React$Component3) {\n  _inherits(_class, _React$Component3);\n\n  function _class(props, context) {\n    _classCallCheck(this, _class);\n\n    var _this4 = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this, props, context));\n\n    _initialiseProps.call(_this4);\n\n    if (props.value && props.defaultValue) {\n      throw new Error('Conflicting DatePicker properties \\'value\\' and \\'defaultValue\\'');\n    }\n\n    var state = _this4.makeDateValues(props.value || props.defaultValue);\n\n    if (props.weekStartsOn > 1) {\n      state.dayLabels = props.dayLabels.slice(props.weekStartsOn).concat(props.dayLabels.slice(0, props.weekStartsOn));\n    } else if (props.weekStartsOn === 1) {\n      state.dayLabels = props.dayLabels.slice(1).concat(props.dayLabels.slice(0, 1));\n    } else {\n      state.dayLabels = props.dayLabels;\n    }\n\n    state.focused = false;\n    state.inputFocused = false;\n    state.placeholder = props.placeholder || props.dateFormat;\n    state.separator = props.dateFormat.match(/[^A-Z]/)[0];\n    _this4.state = state;\n    return _this4;\n  }\n\n  _createClass(_class, [{\n    key: 'shouldComponentUpdate',\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      return !(this.state.inputFocused === true && nextState.inputFocused === false);\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(newProps) {\n      var value = newProps.value;\n\n      if (this.getValue() !== value) {\n        this.setState(this.makeDateValues(value));\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this5 = this;\n\n      var calendarHeader = _react2.default.createElement(CalendarHeader, {\n        previousButtonElement: this.props.previousButtonElement,\n        nextButtonElement: this.props.nextButtonElement,\n        displayDate: this.state.displayDate,\n        minDate: this.props.minDate,\n        maxDate: this.props.maxDate,\n        onChange: this.onChangeMonth,\n        monthLabels: this.props.monthLabels,\n        dateFormat: this.props.dateFormat\n      });\n\n      var control = this.props.customControl ? _react2.default.cloneElement(this.props.customControl, {\n        onKeyDown: this.handleKeyDown,\n        value: this.state.inputValue || '',\n        required: this.props.required,\n        placeholder: this.state.focused ? this.props.dateFormat : this.state.placeholder,\n        ref: 'input',\n        disabled: this.props.disabled,\n        onFocus: this.handleFocus,\n        onBlur: this.handleBlur,\n        onChange: this.handleInputChange,\n        className: this.props.className,\n        style: this.props.style,\n        autoComplete: this.props.autoComplete,\n        onInvalid: this.props.onInvalid,\n        noValidate: this.props.noValidate\n      }) : _react2.default.createElement(_FormControl2.default, {\n        onKeyDown: this.handleKeyDown,\n        value: this.state.inputValue || '',\n        required: this.props.required,\n        ref: 'input',\n        type: 'text',\n        className: this.props.className,\n        style: this.props.style,\n        autoFocus: this.props.autoFocus,\n        disabled: this.props.disabled,\n        placeholder: this.state.focused ? this.props.dateFormat : this.state.placeholder,\n        onFocus: this.handleFocus,\n        onBlur: this.handleBlur,\n        onChange: this.handleInputChange,\n        autoComplete: this.props.autoComplete,\n        onInvalid: this.props.onInvalid,\n        noValidate: this.props.noValidate\n      });\n      return _react2.default.createElement(_InputGroup2.default, {\n        ref: 'inputGroup',\n        bsClass: this.props.showClearButton ? this.props.bsClass : '',\n        bsSize: this.props.bsSize,\n        id: this.props.id ? this.props.id + '_group' : null\n      }, control, _react2.default.createElement(_Overlay2.default, {\n        rootClose: true,\n        onHide: this.handleHide,\n        show: this.state.focused,\n        container: function container() {\n          return _this5.props.calendarContainer || _reactDom2.default.findDOMNode(_this5.refs.overlayContainer);\n        },\n        target: function target() {\n          return _reactDom2.default.findDOMNode(_this5.refs.input);\n        },\n        placement: this.state.calendarPlacement,\n        delayHide: 200\n      }, _react2.default.createElement(_Popover2.default, {\n        id: 'date-picker-popover-' + this.props.instanceCount,\n        className: 'date-picker-popover',\n        title: calendarHeader\n      }, _react2.default.createElement(Calendar, {\n        cellPadding: this.props.cellPadding,\n        selectedDate: this.state.selectedDate,\n        displayDate: this.state.displayDate,\n        onChange: this.onChangeDate,\n        dayLabels: this.state.dayLabels,\n        weekStartsOn: this.props.weekStartsOn,\n        showTodayButton: this.props.showTodayButton,\n        todayButtonLabel: this.props.todayButtonLabel,\n        minDate: this.props.minDate,\n        maxDate: this.props.maxDate,\n        roundedCorners: this.props.roundedCorners,\n        showWeeks: this.props.showWeeks\n      }))), _react2.default.createElement('div', {\n        ref: 'overlayContainer',\n        style: {\n          position: 'relative'\n        }\n      }), _react2.default.createElement('input', {\n        ref: 'hiddenInput',\n        type: 'hidden',\n        id: this.props.id,\n        name: this.props.name,\n        value: this.state.value || '',\n        'data-formattedvalue': this.state.value ? this.state.inputValue : ''\n      }), this.props.showClearButton && !this.props.customControl && _react2.default.createElement(_InputGroup2.default.Addon, {\n        onClick: this.props.disabled ? null : this.clear,\n        style: {\n          cursor: this.state.inputValue && !this.props.disabled ? 'pointer' : 'not-allowed'\n        }\n      }, _react2.default.createElement('div', {\n        style: {\n          opacity: this.state.inputValue && !this.props.disabled ? 1 : 0.5\n        }\n      }, this.props.clearButtonElement)), this.props.children);\n    }\n  }]);\n\n  return _class;\n}(_react2.default.Component);\n\n_class.displayName = 'DatePicker';\n_class.propTypes = {\n  defaultValue: _propTypes2.default.string,\n  value: _propTypes2.default.string,\n  required: _propTypes2.default.bool,\n  className: _propTypes2.default.string,\n  style: _propTypes2.default.object,\n  minDate: _propTypes2.default.string,\n  maxDate: _propTypes2.default.string,\n  cellPadding: _propTypes2.default.string,\n  autoComplete: _propTypes2.default.string,\n  placeholder: _propTypes2.default.string,\n  dayLabels: _propTypes2.default.array,\n  monthLabels: _propTypes2.default.array,\n  onChange: _propTypes2.default.func,\n  onClear: _propTypes2.default.func,\n  onBlur: _propTypes2.default.func,\n  onFocus: _propTypes2.default.func,\n  autoFocus: _propTypes2.default.bool,\n  disabled: _propTypes2.default.bool,\n  weekStartsOnMonday: function weekStartsOnMonday(props, propName, componentName) {\n    if (props[propName]) {\n      return new Error('Prop \\'' + propName + '\\' supplied to \\'' + componentName + '\\' is obsolete. Use \\'weekStartsOn\\' instead.');\n    }\n  },\n  weekStartsOn: _propTypes2.default.number,\n  clearButtonElement: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]),\n  showClearButton: _propTypes2.default.bool,\n  previousButtonElement: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]),\n  nextButtonElement: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]),\n  calendarPlacement: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),\n  dateFormat: _propTypes2.default.string,\n  // 'MM/DD/YYYY', 'DD/MM/YYYY', 'YYYY/MM/DD', 'DD-MM-YYYY'\n  bsClass: _propTypes2.default.string,\n  bsSize: _propTypes2.default.string,\n  calendarContainer: _propTypes2.default.object,\n  id: _propTypes2.default.string,\n  name: _propTypes2.default.string,\n  showTodayButton: _propTypes2.default.bool,\n  todayButtonLabel: _propTypes2.default.string,\n  instanceCount: _propTypes2.default.number,\n  customControl: _propTypes2.default.object,\n  roundedCorners: _propTypes2.default.bool,\n  showWeeks: _propTypes2.default.bool,\n  children: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.node), _propTypes2.default.node]),\n  onInvalid: _propTypes2.default.func,\n  noValidate: _propTypes2.default.bool\n};\n\n_class.defaultProps = function () {\n  var language = typeof window !== 'undefined' && window.navigator ? (window.navigator.userLanguage || window.navigator.language || '').toLowerCase() : '';\n  var dateFormat = !language || language === 'en-us' ? 'MM/DD/YYYY' : 'DD/MM/YYYY';\n  return {\n    cellPadding: '5px',\n    dayLabels: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n    monthLabels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n    clearButtonElement: '×',\n    previousButtonElement: '<',\n    nextButtonElement: '>',\n    calendarPlacement: 'bottom',\n    dateFormat: dateFormat,\n    showClearButton: true,\n    autoFocus: false,\n    disabled: false,\n    showTodayButton: false,\n    todayButtonLabel: 'Today',\n    autoComplete: 'on',\n    showWeeks: false,\n    instanceCount: instanceCount++,\n    style: {\n      width: '100%'\n    },\n    roundedCorners: false,\n    noValidate: false\n  };\n}();\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this6 = this;\n\n  this.makeDateValues = function (isoString) {\n    var displayDate = void 0;\n    var selectedDate = isoString ? new Date(isoString.slice(0, 10) + 'T12:00:00.000Z') : null;\n    var minDate = _this6.props.minDate ? new Date(_this6.props.minDate.slice(0, 10) + 'T12:00:00.000Z') : null;\n    var maxDate = _this6.props.maxDate ? new Date(_this6.props.maxDate.slice(0, 10) + 'T12:00:00.000Z') : null;\n    var inputValue = isoString ? _this6.makeInputValueString(selectedDate) : null;\n\n    if (selectedDate) {\n      displayDate = new Date(selectedDate);\n    } else {\n      var today = new Date(new Date().toISOString().slice(0, 10) + 'T12:00:00.000Z');\n\n      if (minDate && Date.parse(minDate) >= Date.parse(today)) {\n        displayDate = minDate;\n      } else if (maxDate && Date.parse(maxDate) <= Date.parse(today)) {\n        displayDate = maxDate;\n      } else {\n        displayDate = today;\n      }\n    }\n\n    return {\n      value: selectedDate ? selectedDate.toISOString() : null,\n      displayDate: displayDate,\n      selectedDate: selectedDate,\n      inputValue: inputValue\n    };\n  };\n\n  this.clear = function () {\n    if (_this6.props.onClear) {\n      _this6.props.onClear();\n    } else {\n      _this6.setState(_this6.makeDateValues(null));\n    }\n\n    if (_this6.props.onChange) {\n      _this6.props.onChange(null, null);\n    }\n  };\n\n  this.handleHide = function () {\n    if (_this6.state.inputFocused) {\n      return;\n    }\n\n    _this6.setState({\n      focused: false\n    });\n\n    if (_this6.props.onBlur) {\n      var event = document.createEvent('CustomEvent');\n      event.initEvent('Change Date', true, false);\n\n      _reactDom2.default.findDOMNode(_this6.refs.hiddenInput).dispatchEvent(event);\n\n      _this6.props.onBlur(event);\n    }\n  };\n\n  this.handleKeyDown = function (e) {\n    if (e.which === 9 && _this6.state.inputFocused) {\n      _this6.setState({\n        focused: false\n      });\n\n      if (_this6.props.onBlur) {\n        var event = document.createEvent('CustomEvent');\n        event.initEvent('Change Date', true, false);\n\n        _reactDom2.default.findDOMNode(_this6.refs.hiddenInput).dispatchEvent(event);\n\n        _this6.props.onBlur(event);\n      }\n    }\n  };\n\n  this.handleFocus = function () {\n    if (_this6.state.focused === true) {\n      return;\n    }\n\n    var placement = _this6.getCalendarPlacement();\n\n    _this6.setState({\n      inputFocused: true,\n      focused: true,\n      calendarPlacement: placement\n    });\n\n    if (_this6.props.onFocus) {\n      var event = document.createEvent('CustomEvent');\n      event.initEvent('Change Date', true, false);\n\n      _reactDom2.default.findDOMNode(_this6.refs.hiddenInput).dispatchEvent(event);\n\n      _this6.props.onFocus(event);\n    }\n  };\n\n  this.handleBlur = function () {\n    _this6.setState({\n      inputFocused: false\n    });\n  };\n\n  this.getValue = function () {\n    return _this6.state.selectedDate ? _this6.state.selectedDate.toISOString() : null;\n  };\n\n  this.getFormattedValue = function () {\n    return _this6.state.displayDate ? _this6.state.inputValue : null;\n  };\n\n  this.getCalendarPlacement = function () {\n    var tag = Object.prototype.toString.call(_this6.props.calendarPlacement);\n    var isFunction = tag === '[object AsyncFunction]' || tag === '[object Function]' || tag === '[object GeneratorFunction]' || tag === '[object Proxy]';\n\n    if (isFunction) {\n      return _this6.props.calendarPlacement();\n    } else {\n      return _this6.props.calendarPlacement;\n    }\n  };\n\n  this.makeInputValueString = function (date) {\n    var month = date.getMonth() + 1;\n    var day = date.getDate(); //this method is executed during intialState setup... handle a missing state properly\n\n    var separator = _this6.state ? _this6.state.separator : _this6.props.dateFormat.match(/[^A-Z]/)[0];\n\n    if (_this6.props.dateFormat.match(/MM.DD.YYYY/)) {\n      return (month > 9 ? month : '0' + month) + separator + (day > 9 ? day : '0' + day) + separator + date.getFullYear();\n    } else if (_this6.props.dateFormat.match(/DD.MM.YYYY/)) {\n      return (day > 9 ? day : '0' + day) + separator + (month > 9 ? month : '0' + month) + separator + date.getFullYear();\n    } else {\n      return date.getFullYear() + separator + (month > 9 ? month : '0' + month) + separator + (day > 9 ? day : '0' + day);\n    }\n  };\n\n  this.handleBadInput = function (originalValue) {\n    var parts = originalValue.replace(new RegExp('[^0-9' + _this6.state.separator + ']'), '').split(_this6.state.separator);\n\n    if (_this6.props.dateFormat.match(/MM.DD.YYYY/) || _this6.props.dateFormat.match(/DD.MM.YYYY/)) {\n      if (parts[0] && parts[0].length > 2) {\n        parts[1] = parts[0].slice(2) + (parts[1] || '');\n        parts[0] = parts[0].slice(0, 2);\n      }\n\n      if (parts[1] && parts[1].length > 2) {\n        parts[2] = parts[1].slice(2) + (parts[2] || '');\n        parts[1] = parts[1].slice(0, 2);\n      }\n\n      if (parts[2]) {\n        parts[2] = parts[2].slice(0, 4);\n      }\n    } else {\n      if (parts[0] && parts[0].length > 4) {\n        parts[1] = parts[0].slice(4) + (parts[1] || '');\n        parts[0] = parts[0].slice(0, 4);\n      }\n\n      if (parts[1] && parts[1].length > 2) {\n        parts[2] = parts[1].slice(2) + (parts[2] || '');\n        parts[1] = parts[1].slice(0, 2);\n      }\n\n      if (parts[2]) {\n        parts[2] = parts[2].slice(0, 2);\n      }\n    }\n\n    _this6.setState({\n      inputValue: parts.join(_this6.state.separator)\n    });\n  };\n\n  this.handleInputChange = function () {\n    var originalValue = _reactDom2.default.findDOMNode(_this6.refs.input).value;\n\n    var inputValue = originalValue.replace(/(-|\\/\\/)/g, _this6.state.separator).slice(0, 10);\n\n    if (!inputValue) {\n      _this6.clear();\n\n      return;\n    }\n\n    var month = void 0,\n        day = void 0,\n        year = void 0;\n\n    if (_this6.props.dateFormat.match(/MM.DD.YYYY/)) {\n      if (!inputValue.match(/[0-1][0-9].[0-3][0-9].[1-2][0-9][0-9][0-9]/)) {\n        return _this6.handleBadInput(originalValue);\n      }\n\n      month = inputValue.slice(0, 2).replace(/[^0-9]/g, '');\n      day = inputValue.slice(3, 5).replace(/[^0-9]/g, '');\n      year = inputValue.slice(6, 10).replace(/[^0-9]/g, '');\n    } else if (_this6.props.dateFormat.match(/DD.MM.YYYY/)) {\n      if (!inputValue.match(/[0-3][0-9].[0-1][0-9].[1-2][0-9][0-9][0-9]/)) {\n        return _this6.handleBadInput(originalValue);\n      }\n\n      day = inputValue.slice(0, 2).replace(/[^0-9]/g, '');\n      month = inputValue.slice(3, 5).replace(/[^0-9]/g, '');\n      year = inputValue.slice(6, 10).replace(/[^0-9]/g, '');\n    } else {\n      if (!inputValue.match(/[1-2][0-9][0-9][0-9].[0-1][0-9].[0-3][0-9]/)) {\n        return _this6.handleBadInput(originalValue);\n      }\n\n      year = inputValue.slice(0, 4).replace(/[^0-9]/g, '');\n      month = inputValue.slice(5, 7).replace(/[^0-9]/g, '');\n      day = inputValue.slice(8, 10).replace(/[^0-9]/g, '');\n    }\n\n    var monthInteger = parseInt(month, 10);\n    var dayInteger = parseInt(day, 10);\n    var yearInteger = parseInt(year, 10);\n\n    if (monthInteger > 12 || dayInteger > 31) {\n      return _this6.handleBadInput(originalValue);\n    }\n\n    if (!isNaN(monthInteger) && !isNaN(dayInteger) && !isNaN(yearInteger) && monthInteger <= 12 && dayInteger <= 31 && yearInteger > 999) {\n      var selectedDate = new Date(yearInteger, monthInteger - 1, dayInteger, 12, 0, 0, 0);\n\n      _this6.setState({\n        selectedDate: selectedDate,\n        displayDate: selectedDate,\n        value: selectedDate.toISOString()\n      });\n\n      if (_this6.props.onChange) {\n        _this6.props.onChange(selectedDate.toISOString(), inputValue);\n      }\n    }\n\n    _this6.setState({\n      inputValue: inputValue\n    });\n  };\n\n  this.onChangeMonth = function (newDisplayDate) {\n    _this6.setState({\n      displayDate: newDisplayDate\n    });\n  };\n\n  this.onChangeDate = function (newSelectedDate) {\n    var inputValue = _this6.makeInputValueString(newSelectedDate);\n\n    _this6.setState({\n      inputValue: inputValue,\n      selectedDate: newSelectedDate,\n      displayDate: newSelectedDate,\n      value: newSelectedDate.toISOString(),\n      focused: false\n    });\n\n    if (_this6.props.onBlur) {\n      var event = document.createEvent('CustomEvent');\n      event.initEvent('Change Date', true, false);\n\n      _reactDom2.default.findDOMNode(_this6.refs.hiddenInput).dispatchEvent(event);\n\n      _this6.props.onBlur(event);\n    }\n\n    if (_this6.props.onChange) {\n      _this6.props.onChange(newSelectedDate.toISOString(), inputValue);\n    }\n  };\n};\n\nexports.default = _class;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}